/// <reference path="../../typings/index.d.ts" />

import "colors";

function __error()
{
    try
    {
        throw Error('');
    }
    catch (err)
    {
        return err;
    }
}

let Log = {
    print: function(msg:string|any)
    {
        let str=msg+"";
        console.log(str.white);
    },

    debug: function (msg: string | any)
    {
        let error = __error();
        let stack = error.stack.split("\n");
        console.log(("[Debug] " + msg).green + " <= " + stack[3].trim());
    },

    info: function (msg: string | any)
    {
        let error = __error();
        let stack = error.stack.split("\n");
        console.log(("[Info] " + msg).yellow + " <= " + stack[3].trim());
    },

    error: function (msg: string | any, value?: any)
    {
        let error = __error();
        let stack = error.stack.split("\n");
        let stackStr = "";
        for (let i = 5; i < stack.length; ++i)
        {
            stackStr += "\n" + stack[i];
        }
        console.log(("[ERROR] " + msg).red + " <= " + stack[3].trim() + stackStr);

        if (value) return value;
        return false;
    },

    stack: function (msg: string | any)
    {
        let error = __error();
        console.log("[Stack] " + msg + "\n" + error.stack);
    },

    dump: function (obj: any)
    {
        let msg = JSON.stringify(obj);
        let error = __error();
        let stack = error.stack.split("\n");
        console.log("[Dump] " + msg + " <= " + stack[3].trim());
    },

    dumpArray: function (obj: any)
    {
        let msg = "";
        if (obj.length)
        {
            for (let i = 0; i < obj.length; ++i)
            {
                msg += "\n(" + i + ") : " + JSON.stringify(obj[i]);
            }
        }
        else msg = JSON.stringify(obj);

        let error = __error();
        let stack = error.stack.split("\n");
        console.log("[Dump] " + msg + " <= " + stack[3].trim());
    }
};

export default Log;
